{"version":3,"sources":["util/firebase.js","components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","useState","patientName","setTitle","symptoms","getSymptoms","age","getAge","phonenumber","getNumber","email","getEmail","location","getLocation","class","for","type","id","name","onChange","e","target","value","placeholder","style","width","marginTop","height","onKeyDown","evt","key","preventDefault","required","className","color","borderRadius","border","background","onClick","todoRef","database","ref","todo","status","push","alert","fontWeight","Todo","TodoList","todoList","setTodoList","useEffect","on","snapshot","todos","val","map","index","App","textShadow","textTransform","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAaAA,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,wDACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,4BAKFT,QAAf,ECZe,SAASU,IAAQ,IAAD,EACGC,mBAAS,IADZ,mBACtBC,EADsB,KACTC,EADS,OAEGF,mBAAS,IAFZ,mBAEtBG,EAFsB,KAEZC,EAFY,OAGPJ,mBAAS,IAHF,mBAGtBK,EAHsB,KAGjBC,EAHiB,OAIIN,mBAAS,IAJb,mBAItBO,EAJsB,KAITC,EAJS,OAKHR,mBAAS,IALN,mBAKtBS,EALsB,KAKfC,EALe,OAMGV,mBAAS,IANZ,mBAMtBW,EANsB,KAMZC,EANY,KAmD7B,OACA,6BACF,yBAAKC,MAAM,OACL,yBAAKA,MAAM,UACT,2BAAOC,IAAI,SAAQ,8CAErB,yBAAKD,MAAM,UAET,2BAAOE,KAAK,OAAOC,GAAG,QAAQC,KAAK,cAAcC,SAlDhC,SAACC,GACtBjB,EAASiB,EAAEC,OAAOC,QAiD6DA,MAAOpB,EAAcqB,YAAY,oBAAoBC,MAAO,CAAGC,MAAM,aAIpJ,yBAAKX,MAAM,OACT,yBAAKA,MAAM,UACT,2BAAOC,IAAI,UAAUS,MAAO,CAACE,UAAU,SAAS,0CAElD,yBAAKZ,MAAM,UACT,8BAAUG,GAAG,UAASE,SAtDT,SAAAC,GACjBf,EAAYe,EAAEC,OAAOC,QAqD6BA,MAAOlB,EAAUc,KAAK,WAAWK,YAAY,8BAA8BC,MAAO,CAACG,OAAO,QAAQF,MAAM,aAI1J,yBAAKX,MAAM,OACT,yBAAKA,MAAM,UACT,2BAAOC,IAAI,OAAS,qCAEtB,yBAAKD,MAAM,UAET,2BAAOE,KAAK,SAASC,GAAG,MAAMC,KAAK,MAAMU,UAAY,SAACC,GAAD,MAAqB,MAAZA,EAAIC,KAAeD,EAAIE,kBAAoBZ,SA5D/F,SAAAC,GACdb,EAAOa,EAAEC,OAAOC,QA2DkHA,MAAOhB,EAAMiB,YAAY,mBAAmBC,MAAO,CAAGC,MAAM,aAI9L,yBAAKX,MAAM,OACT,yBAAKA,MAAM,UACT,2BAAOC,IAAI,eAAcS,MAAO,CAACE,UAAU,SAAS,8CAEtD,yBAAKZ,MAAM,UAET,2BAAOE,KAAK,SAASC,GAAG,eAAeW,UAAY,SAACC,GAAD,MAAqB,MAAZA,EAAIC,KAAeD,EAAIE,kBAAmBb,KAAK,SAASC,SAnEvG,SAAAC,GACjBX,EAAUW,EAAEC,OAAOC,QAkE6HA,MAAOd,EAAce,YAAY,4BAA4BC,MAAO,CAAGC,MAAM,aAI7N,yBAAKX,MAAM,OACT,yBAAKA,MAAM,UACT,2BAAOC,IAAI,QAAQS,MAAO,CAACE,UAAU,SAAS,uCAEhD,yBAAKZ,MAAM,UAET,2BAAOE,KAAK,QAAQC,GAAG,QAAQC,KAAK,QAAQC,SAzEhC,SAAAC,GAChBT,EAASS,EAAEC,OAAOC,QAwEqDA,MAAOZ,EAAQa,YAAY,qBAAqBC,MAAO,CAAGC,MAAM,SAAUO,UAAQ,MAKzJ,yBAAKlB,MAAM,OACT,yBAAKA,MAAM,UACT,2BAAOC,IAAI,WAAWS,MAAO,CAACE,UAAU,SAAS,0CAEnD,yBAAKZ,MAAM,UAET,2BAAOE,KAAK,MAAMC,GAAG,WAAWC,KAAK,WAAWC,SA/EjC,SAAAC,GACnBP,EAAYO,EAAEC,OAAOC,QA8EyDA,MAAOV,EAAWW,YAAY,wBACxGC,MAAO,CAAGC,MAAM,SAAUO,UAAQ,MAKtC,yBAAKlB,MAAM,OAEX,yBAAKA,MAAM,UACX,4BAAQmB,UAAU,MAClBT,MAAO,CAACU,MAAM,QAAST,MAAM,QAAQE,OAAO,OAAQQ,aAAa,OAAQC,OAAO,OAAQC,WAAW,UAAUX,UAAU,QACvHY,QArFiB,WACjB,IAAMC,EAAUjD,EAASkD,WAAWC,IAAI,4BAClCC,EAAO,CACXxC,cACAE,WACAE,MACAE,cACAE,QACAE,WAEA+B,QAAQ,GAGVJ,EAAQK,KAAKF,GACbG,MAAM,8DAqEN,eAGA,wBAAIrB,MAAO,CAACE,UAAU,OAAOoB,WAAW,WAAxC,4B,YCxHW,SAASC,EAAT,GAAwB,EAARL,KAY7B,OACE,8BCbW,SAASM,IAAY,IAAD,EACD/C,qBADC,mBAC1BgD,EAD0B,KAChBC,EADgB,KAejC,OAZAC,qBAAU,WACQ7D,EAASkD,WAAWC,IAAI,4BAChCW,GAAG,SAAS,SAACC,GACnB,IAAMC,EAAQD,EAASE,MACjBN,EAAW,GACjB,IAAK,IAAIhC,KAAMqC,EACbL,EAASL,KAAT,aAAgB3B,MAAOqC,EAAMrC,KAE/BiC,EAAYD,QAEb,IAGD,6BACGA,EACGA,EAASO,KAAI,SAACd,EAAMe,GAAP,OAAiB,kBAACV,EAAD,CAAML,KAAMA,EAAMZ,IAAK2B,OACrD,ICjBK,SAASC,IACtB,OACE,yBAAKzB,UAAU,OACb,6CAEC,6BACC,wBAAInB,MAAM,yBACRU,MAAO,CACXE,UAAU,OACTiC,WAAW,kBACXC,cAAc,cAJb,sBAcF,kBAAC5D,EAAD,MACA,kBAACgD,EAAD,OCfca,QACW,cAA7BC,OAAOlD,SAASmD,UAEe,UAA7BD,OAAOlD,SAASmD,UAEhBD,OAAOlD,SAASmD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9a1e337.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD1KDtf3PPf5PtYmYIfhnubkMTlHDgJTzI\",\n  authDomain: \"hedera-hash-graph.firebaseapp.com\",\n  databaseURL: \"https://hedera-hash-graph-default-rtdb.firebaseio.com\",\n  projectId: \"hedera-hash-graph\",\n  storageBucket: \"hedera-hash-graph.appspot.com\",\n  messagingSenderId: \"903673590600\",\n  appId: \"1:903673590600:web:9118409fb8028cbd56397d\",\n  measurementId: \"${config.measurementId}\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { useState } from 'react';\nimport firebase from '../util/firebase';\n \nexport default function Form() {\n  const [patientName, setTitle] = useState('');\n  const [symptoms, getSymptoms] = useState('');\n  const [age, getAge] = useState('');\n  const [phonenumber, getNumber] = useState('');\n  const [email, getEmail] = useState('');\n  const [location, getLocation] = useState('');\n\n  \n  const handleOnChange = (e) => {\n    setTitle(e.target.value);\n    \n  };\n\n  const handleChange=e=>{\n    getSymptoms(e.target.value);\n  }\n\n  const handleAge=e=>{\n    getAge(e.target.value);\n  }\n  const handleNumber=e=>{\n    getNumber(e.target.value);\n  }\n\n  const handleEmail=e=>{\n    getEmail(e.target.value);\n  }\n\n  \n  const handleLocation=e=>{\n    getLocation(e.target.value);\n  }\n\n\n  const createTodo = () => {\n    const todoRef = firebase.database().ref('Covid-19 Patient Details');\n    const todo = {\n      patientName,\n      symptoms,\n      age, \n      phonenumber,\n      email,\n      location,\n      // newAccountId,\n      status: false,\n    };\n\n    todoRef.push(todo);\n    alert(\"The Patient Details are Successfully Submitted to Hedera\")\n  };\n  return (\n  <div>\n<div class=\"row\">\n      <div class=\"col-25\">\n        <label for=\"fname\"><h5>Patient Name</h5></label>\n      </div>\n      <div class=\"col-75\">\n        \n        <input type=\"text\" id=\"pname\" name=\"patientName\" onChange={handleOnChange} value={patientName}  placeholder=\"Enter your name..\" style={{  width:\"300px\"}}  />\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-25\">\n        <label for=\"subject\" style={{marginTop:\"1rem\"}}><h5>Symptoms</h5></label>\n      </div>\n      <div class=\"col-75\">\n        <textarea id=\"subject\"onChange={handleChange} value={symptoms} name=\"Symptoms\" placeholder=\"Write about your symptoms..\" style={{height:\"100px\",width:\"300px\" }}  ></textarea>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-25\">\n        <label for=\"age\"   ><h5>Age</h5></label>\n      </div>\n      <div class=\"col-75\">\n        \n        <input type=\"number\" id=\"age\" name=\"age\" onKeyDown={ (evt) => evt.key === 'e' && evt.preventDefault() }  onChange={handleAge} value={age}  placeholder=\"Enter your Age..\" style={{  width:\"300px\"}}  />\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-25\">\n        <label for=\"phone-number\"style={{marginTop:\"1rem\"}}><h5>Phone Number</h5></label>\n      </div>\n      <div class=\"col-75\">\n        \n        <input type=\"number\" id=\"phone-number\" onKeyDown={ (evt) => evt.key === 'e' && evt.preventDefault() } name=\"number\" onChange={handleNumber} value={phonenumber}  placeholder=\"Enter your Phone Number..\" style={{  width:\"300px\"}}  />\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-25\">\n        <label for=\"email\" style={{marginTop:\"1rem\"}}><h5>Email</h5></label>\n      </div>\n      <div class=\"col-75\">\n        \n        <input type=\"email\" id=\"email\" name=\"email\" onChange={handleEmail} value={email}  placeholder=\"Enter your Email..\" style={{  width:\"300px\"}} required />\n      </div>\n    </div>\n \n\n    <div class=\"row\">\n      <div class=\"col-25\">\n        <label for=\"location\" style={{marginTop:\"1rem\"}}><h5>Location</h5></label>\n      </div>\n      <div class=\"col-75\">\n        \n        <input type=\"url\" id=\"location\" name=\"location\" onChange={handleLocation} value={location}  placeholder=\"Paste Your URL Here..\" \n        style={{  width:\"300px\"}} required />\n      </div>\n    </div>\n    \n\n    <div class=\"row\">\n\n    <div class=\"col-75\">\n    <button className=\"sub\"\n    style={{color:\"white\", width:\"300px\",height:\"40px\", borderRadius:\"2rem\", border:\"none\", background:\"#3366ff\",marginTop:\"2rem\"}} \n    onClick={createTodo}>Add Patient</button>\n    <h6 style={{marginTop:\"1rem\",fontWeight:\"bolder\"}}>Click here to submit!</h6>\n    </div>\n\n    </div>\n  </div>\n  );\n}\n","import React from 'react';\nimport firebase from '../util/firebase';\nimport '../App.css';\n\nexport default function Todo({ todo }) {\n  const deleteTodo = () => {\n    const todoRef = firebase.database().ref('Covid-19 Patient Details').child(todo.id);\n    todoRef.remove();\n  };\n  const completeTodo = () => {\n    const todoRef = firebase.database().ref('Covid-19 Patient Details').child(todo.id);\n    todoRef.update({\n      status: !todo.status,\n    });\n    \n  };\n  return (\n    <div>\n\n \n    \n  \n \n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport firebase from '../util/firebase';\nimport Todo from './Todo';\n\nexport default function TodoList() {\n  const [todoList, setTodoList] = useState();\n\n  useEffect(() => {\n    const todoRef = firebase.database().ref('Covid-19 Patient Details');\n    todoRef.on('value', (snapshot) => {\n      const todos = snapshot.val();\n      const todoList = [];\n      for (let id in todos) {\n        todoList.push({ id, ...todos[id] });\n      }\n      setTodoList(todoList);\n    });\n  }, []);\n\n  return (\n    <div>\n      {todoList\n        ? todoList.map((todo, index) => <Todo todo={todo} key={index} />)\n        : ''}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n \n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello, Hedera</h1>\n    \n       <div>\n        <h1 class=\"line-1 anim-typewriter\"\n          style={{\n      marginTop:\"2rem\",\n       textShadow:\"0 0 3px #666699\",\n       textTransform:\"uppercase\",\n    \n          }}\n        >Covid-19 Reporter</h1>\n\n\n      </div>\n \n     \n \n      <Form />\n      <TodoList />\n \n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n \nserviceWorker.unregister();\n"],"sourceRoot":""}